/*!
<<<<<<< HEAD
 * ignore
 */

'use strict';

const assert = require('assert');
const mquery = require('mquery');
=======
 * Module dependencies.
 */

var MPromise = require('./promise');
>>>>>>> 67dff727551b6248efacc127c2432d1747d92b89

/**
 * Helper for multiplexing promise implementations
 *
 * @api private
 */

<<<<<<< HEAD
const store = {
  _promise: null
=======
var Promise = {
  _promise: MPromise
>>>>>>> 67dff727551b6248efacc127c2432d1747d92b89
};

/**
 * Get the current promise constructor
 *
 * @api private
 */
<<<<<<< HEAD

store.get = function() {
  return store._promise;
=======
Promise.get = function() {
  return Promise._promise;
>>>>>>> 67dff727551b6248efacc127c2432d1747d92b89
};

/**
 * Set the current promise constructor
 *
 * @api private
 */

<<<<<<< HEAD
store.set = function(lib) {
  assert.ok(typeof lib === 'function',
    `mongoose.Promise must be a function, got ${lib}`);
  store._promise = lib;
  mquery.Promise = lib;
};

/*!
 * Use native promises by default
 */

store.set(global.Promise);

module.exports = store;
=======
Promise.set = function(lib) {
  if (lib === MPromise) {
    return Promise.reset();
  }
  Promise._promise = require('./ES6Promise');
  Promise._promise.use(lib);
  require('mquery').Promise = Promise._promise.ES6;
};

/**
 * Resets to using mpromise
 *
 * @api private
 */

Promise.reset = function() {
  Promise._promise = MPromise;
};

module.exports = Promise;
>>>>>>> 67dff727551b6248efacc127c2432d1747d92b89
