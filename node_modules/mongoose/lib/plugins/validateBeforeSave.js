'use strict';

/*!
 * ignore
 */

module.exports = function(schema) {
<<<<<<< HEAD
  const unshift = true;
  schema.pre('save', false, function validateBeforeSave(next, options) {
    const _this = this;
=======
  schema.callQueue.unshift(['pre', ['save', function(next, options) {
    var _this = this;
>>>>>>> 67dff727551b6248efacc127c2432d1747d92b89
    // Nested docs have their own presave
    if (this.ownerDocument) {
      return next();
    }

<<<<<<< HEAD
    const hasValidateBeforeSaveOption = options &&
        (typeof options === 'object') &&
        ('validateBeforeSave' in options);

    let shouldValidate;
    if (hasValidateBeforeSaveOption) {
      shouldValidate = !!options.validateBeforeSave;
    } else {
      shouldValidate = this.$__schema.options.validateBeforeSave;
=======
    var hasValidateBeforeSaveOption = options &&
        (typeof options === 'object') &&
        ('validateBeforeSave' in options);

    var shouldValidate;
    if (hasValidateBeforeSaveOption) {
      shouldValidate = !!options.validateBeforeSave;
    } else {
      shouldValidate = this.schema.options.validateBeforeSave;
>>>>>>> 67dff727551b6248efacc127c2432d1747d92b89
    }

    // Validate
    if (shouldValidate) {
<<<<<<< HEAD
      const hasValidateModifiedOnlyOption = options &&
          (typeof options === 'object') &&
          ('validateModifiedOnly' in options);
      const validateOptions = hasValidateModifiedOnlyOption ?
        { validateModifiedOnly: options.validateModifiedOnly } :
        null;
      this.validate(validateOptions, function(error) {
        return _this.$__schema.s.hooks.execPost('save:error', _this, [_this], { error: error }, function(error) {
          _this.$op = 'save';
          next(error);
        });
      });
    } else {
      next();
    }
  }, null, unshift);
=======
      // HACK: use $__original_validate to avoid promises so bluebird doesn't
      // complain
      if (this.$__original_validate) {
        this.$__original_validate({__noPromise: true}, function(error) {
          return _this.schema.s.hooks.execPost('save:error', _this, [_this], { error: error }, function(error) {
            next(error);
          });
        });
      } else {
        this.validate({__noPromise: true}, function(error) {
          return _this.schema.s.hooks.execPost('save:error', _this, [ _this], { error: error }, function(error) {
            next(error);
          });
        });
      }
    } else {
      next();
    }
  }]]);
>>>>>>> 67dff727551b6248efacc127c2432d1747d92b89
};
